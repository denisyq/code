#1 how to build shared library
gcc -fPIC -shared -o abc.so abc.c
//use it. g++ main.cc -o main -L. -labc
//main binary should be with so library, or get can not load shared library error.

-L. 是在编译的时候，告诉系统so库在哪里，但是最后运行时，却找不到
问题是在：
1. 配置LD_LIBRARY_PATH
Open .bashrc => export LD_LIBRARY_PATH=$LD_LIBRARY_PATH: => source .bashrc
2. 修改/etc/ld.so.conf
3. 为库创建软连接，一般在/usr/lib下面(/etc/ld.so.conf), 会放so库，那么我们为so库创建一个/usr/lib/的软连接

#2如何在putty中设置中文
1. putty的option，找到windows->translation,里面有个地方设置utf-8
2. 在file中写中文，保存可能会遇到write error，看下:set fenc,如果不是utf-8，需要在.vimrc里设置set fileencoding=utf-8

#3 github使用
1. git init
2. git config --global user.name " "
3. git config --global user.email ""
4. ssh-keygen 产生的id_rsa.pub在.ssh里面，复制到github的ssh秘钥
5. git remote add origin https://github.com/denisyq/code.git
   git remote | git remote -v 
6. git push -u (第一次需要-u)
7. git stash | git branch bug | git checkout bug | git checkout master | git merge | git branch -d bug | git stash list | git stash pop/apply/drop
**refer to : http://blog.jobbole.com/78960/**

#4 一次创建多个目录
mkdir -p /home/user/{test,test1,test2}

#5 测试磁盘写入速度/灌完指定大小的文件
dd if=/dev/zero of=/tmp/output.img bs=8k count=256k; rm -rf /tmp/output.img

#6 测试磁盘读取速度
hdparm -Tt /dev/sda

#7 修改file时间戳
touch -t 0712250000 file

#8 find|xargs
find ./ -maxdepth 1 ! -type d -iname "*" |xargs -i cp {} bak #每个非目录文件copy进bak文件夹
find ./ -maxdepth 1 ! -type d -iname "*" |xargs -i mv {} {}.bak #修改每个文件成*.bak

#9 ulimit -a
stack size in linux: 8M (can use "ulimit -s 1024" to change size)
stack size in wins:  1M

#10 ulimit -c unlimited
在linux中运行代码，遇到core dump但是却没有core文件产生，是因为ubuntu抑制了core文件产生。
用ulimit -a查看第一行的core文件大小，修改之。

##########
samba
#########
sudo apt-get install samba
sudo smbpasswd -a luyq
vi /etc/samba/smb.conf
sudo /etc/init.d/smaba restart

##########
挂载硬盘
mount
##########
fdisk -lu 查看硬盘情况 一般出来 /dev/sda1 or /dev/sdb1
mkdir /home/disk1 需要将硬盘挂载的目录，创建
mount /dev/sda1 /home/disk1 挂载成功
df -h 检查下

这种情况下的挂载，一般在重启之后会丢失挂载
vi /etc/fstab
在里面增加一行
/dev/sda1 /home/disk1 ext4 defaults 0 0
reboot
df -h

方法二
blkid 命令用来查看硬盘本身信息
/dev/sda1: UUID="*******-********-*******" TYPE="ext4" PARTUUID="*****"
vi /etc/fstab
增加一行
UUID=****-****-***** /home/disk1 ext4 defaults 0 0
reboot

#############
openmp 多线程
#############
#include <omp.h>
#pragma omp parallel num_threads(NUM_THREAD)
{
    id = omp_get_thread_num();
    if (id == (NUM_THREAD -1)){
        //the last thread
    }else{
		//do sth.
    }

}
LOCAL_LDLIBS := -fopenmp
LOCAL_CFLAGS := -mfpu=neon -fopenmp
#这一段是neon
ifeq ($(TARGET_ARCH_ABI), armeabi-v7a)
LOCAL_ARM_NEON := true
LOCAL_ARM_MODE := arm
endif

##############
git manual
##############
1. ssh-keygen -t rsa -C "xx@gmail.com" ==> cat .ssh/id_rsa.pub
2. git init
3. git clone username@host:/remote-path/

	[working dir] == add == [stage index] == commit == [HEAD]
	git add 
	git commit -m "update"
	git status
	git push origin master (git remote add origin <server>)

	[workding dir] <== checkout <== [stage dir] <== reset <== [HEAD] <== reset --hard origin/master <== [remote server]
	git fetch origin;
	git reset --hard origin/master
	git reset HEAD <filename>
	git reset HEAD^ <filename> ==> HEAD再往前一个版本,当然还有HEAD^^ 
	==> 这种不带--hard，是将[commit/HEAD]转换回[stage index]，[workding dir]不改变，但是带上--hard就是从头到尾都改变了
	git reset --hard <commit-id>
	git reset --hard origin/master
	git checkout -- <filename> //没有--，就是变换branch了

	branch: 
			git checkout -b feature_branch
			git checkout master
			git branch -d feature_branch
			git push origin <branch>
			//在feature分支修改的代码，merge到master
			git checkout master
			git merge feature_branch;
			//肯定有conflicts,手动修改
			git diff <source_branch> <target_branch>

			如果这个bug分支有commit但是没有被合并就想删掉,用git branch -d bug_branch 是不行的
			得用git branch -D bug_branch

	Log:	
			git log
			git log --author=bob
			git log --pretty=oneline
			git log --graph --oneline --decorate --all
			git log --help

	diff: 
			git diff <filename> ==>针对workding dir 和 stage index 比较差异
			git diff HEAD -- <filename> ==> 针对working dir 和 [HEAD/commit] 比较
			git diff --cached <filename> ==> 针对[commit/HEAD] 和 [Stage index] 比较差异

	rm:
			git rm <filename>
	
	remote:
			git remote
			git remote -v
			git remote add origin git@xx-repo-name.git
	  
	stash:
			场景：做dev的同时，来了bug要处理
			in branch dev 用git stash保存未完成的开发，这个时候working dir 是干净的
			
			需要从哪个branch复制个分支出来解bug
			git checkout master
			git checkout -b bug_1130
			
			修改好了bug，需要merge到master分支
			git checkout master
			git merge bug_1130

			删除bug分支
			git branch -d bug_1130

			恢复未完成的dev开发
			git stash list
			git stash apply/drop/pop
			git stash apply stash@{0}
			一种是用git stash apply恢复，但是stash内容并没有删除掉，还需要用git stash drop来删除
			还有一种是：git stash pop来恢复，同时，stash内容也删除掉了
	tag:
			git tab v1.0
			git tab
			对以前的commit打标签：git log --pretty=oneline; git tab v0.9 <commit-id>
			git show v0.9
			git tab -a v0.9 -m "Version 0.9 released" <commit-id>

			git tab -d v0.9

			git push origin v1.0
			git push origin :refs/tags/v1.0 删除一个远程的标签

	alias:
			git config --global alias.st status
			git config --global alias.co checkout
			git config --global alias.ci commit
			git config --global alias.br branch
			git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"














